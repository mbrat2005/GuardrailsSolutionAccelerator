# syntax=docker/dockerfile:1.3-labs 
# escape=`
FROM  mcr.microsoft.com/azure-powershell:latest

# install git
RUN apt-get update && apt-get install -y git

# clone GuardrailsSolutionAccelerator repo
RUN git clone https://github.com/mbrat2005/GuardrailsSolutionAccelerator.git

# checkout container-instance-test branch
RUN git -C GuardrailsSolutionAccelerator checkout container-instance-test

# switch to powershell
SHELL ["pwsh", "-command"]

# install Az.Marketplace module
RUN Install-Module -Name Az.Marketplace -Force

# install Guardrails Modules in powershell module path
RUN <<-EOF
    Set-Location /GuardrailsSolutionAccelerator
    $moduleManifestFilesObjs = Get-ChildItem -Path ./src -Recurse -Include *.psm1
    Write-Host "'$($moduleManifestFiles.count)' module manifest files "

    ForEach ($moduleManifest in $moduleManifestFilesObjs) {
        $moduleCodeFile = Get-Item -Path $moduleManifest.FullName.replace('psd1','psm1')
        
        If ($moduleManifestFilesObjs.FullName -icontains $moduleManifest.FullName -or $moduleManifestFilesObjs.FullName -icontains $moduleCodeFile.FullName) {
          Write-Host "Module '$($moduleManifest.BaseName)' found, copying module files..."

          $destPath = "/root/.local/share/powershell/Modules/$($moduleManifest.BaseName)"
          New-Item -Path $destPath -ItemType Directory -Force
          Copy-Item -Path "$($moduleManifest.Directory)/*" -Destination $destPath/ -Force

        }
        Else {
            Write-Host "Neither the manifest '$($moduleManifest.FullName.toLower())' or script file '$($moduleCodeFile.FullName.ToLower())' for module '$($moduleManifest.BaseName)' was changed, skipping zipping..."
        }
    }
EOF

# install OMS Ingestion API Module
RUN Install-Module -Name OMSIngestionAPI -Force

# create execution script
COPY <<'EOF' /execute.ps1
#!/usr/bin/env pwsh
param (
    [parameter(Mandatory=$false)]
    [ValidateSet('main','backend')]
    [string]$runbook
    )
If ([string]::IsNullOrEmpty($runbook)) {
    Write-Host "No runbook specified, exiting..."
    exit 0
}
switch ($runbook) {
    'main' {
        Write-Host "Running main runbook..."

        If (![string]::IsNullOrEmpty($env:CustomModulesBaseURL)) {
            Write-Host "`$env:CustomModulesBaseURL is set to '$env:CustomModulesBaseURL', downloading custom modules..."

            $moduleFileNamePattern = [regex]"(?:uri: '`\$\{CustomModulesBaseURL\}/)(?<moduleFileName>.+?\.zip)'"
            $moduleFileNames = @()
            $moduleFIleNamePattern.matches((Get-Content /GuardrailsSolutionAccelerator/setup/IaC/modules/automationaccount.bicep)) | Foreach-Object {
                $moduleFileNames += $_.Groups["moduleFileName"].Value
            }
            
            New-Item -ItemType Directory -Path /tempModules -Force
            $webClient = New-Object System.Net.WebClient
            $moduleFileNames | Foreach-Object {
                $moduleFileName = $_
                $moduleFileURL = "$env:CustomModulesBaseURL/$moduleFileName"

                If (Test-Path -Path /tempModules/$moduleFileName) {
                    Remove-Item -Path /tempModules/$moduleFileName -Force
                }

                Write-Host "Downloading module '$moduleFileName' from '$moduleFileURL'..."
                $webClient.DownloadFile($moduleFileURL, "/tempModules/$moduleFileName")

                Write-Host "Extracting module '$moduleFileName'..."
                $moduleFileBaseName = $moduleFileName.replace('.zip','')
                Expand-Archive -Path "/tempModules/$moduleFileName" -DestinationPath /root/.local/share/powershell/Modules/$moduleFileBaseName -Force
            }
        }

        Set-Location /GuardrailsSolutionAccelerator/setup
        .\main.ps1
    }
    'backend' {
        Write-Host "Running backend runbook..."
        Set-Location /GuardrailsSolutionAccelerator/setup
        .\backend.ps1
    }
}
EOF

CMD ["pwsh", "/execute.ps1", "-runbook"]